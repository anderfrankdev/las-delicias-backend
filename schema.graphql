type Plate{
    id:ID
    price:Float
    title:String
    images:[String]
    ingridients:[String]
    description:String
    stripe_code:String
    category:String
}

type Order{
    price:Float
    title:String
    images:[String]
    amount:Float
    date:Float
    status:String
}

type Address{
    recipient:String
    house:Int
    street:String
    city:String
    state:String
    zipcode:Int
}

type User{
    name:String
    email: String
    password: String
    cart:[[String]]
    favourites:[Plate]
    orders:[Order]
    addresses:[Address]
}

input UserInput{
    name:String!
    email: String!
    password: String!
}

type LogoutMsg{
    message: String!
}

type Query{
    getOwnData:User
    logout:LogoutMsg
    getPlates:[Plate]
}

input LoginInput{
    email: String!
    password: String!
}

enum Category{
    Italian
    Japanese
    Soup
    Fast
    Seafood
    Meat
    Vegan
    Desserts
    Salads
    Venezuelan
}

input PlateInput{
    price:Float
    title:String
    images:[String]
    ingridients:[String]
    description:String
    stripe_code:String
    category:Category
}

input StripeObject{
    price:String
    quantity:Int
}

type PaymentResponse{
    
    url:String

}
type Message{
    message:String
}
type Mutation{
    createUser(input:UserInput!):User
    createPlate(input:PlateInput!):Plate
    login(input:LoginInput!):User
    pay(input:[[String]]!):PaymentResponse
    addToCart(input:[[String]]!):Message
    deleteItemInCart(input:String!):Message
}