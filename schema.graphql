type Plate{
    id:ID
    price:Float
    title:String
    images:[String]
    ingridients:[String]
    description:String
    stripe_code:String
    category:String
}

type Order{
    id:ID
    amount_items:Int
    amount_paid:Float
}

type Address{
    id:ID
    recipient:String
    house:String
    street:String
    city:String
    state:String
    zipcode:String
    main:Boolean
}
input AddressInput{
    recipient:String
    house:String
    street:String
    city:String
    state:String
    zipcode:String
}

type User{
    name:String
    email: String
    password: String
    cart:[[String]]
    favourites:[Plate]
    orders:[Order]
    addresses:[Address]
}

input UserInput{
    name:String!
    email: String!
    password: String!
}

type LogoutMsg{
    message: String!
}

type Query{
    getOwnData:User
    logout:LogoutMsg
    getPlates:[Plate]
    processPayment:PaymentMessage
    getDiscounts:[Discount]
}

input LoginInput{
    email: String!
    password: String!
}

enum Category{
    Italian
    Japanese
    Soup
    Fast
    Seafood
    Meat
    Vegan
    Desserts
    Salads
    Venezuelan
}

input PlateInput{
    price:Float
    title:String
    images:[String]
    ingridients:[String]
    description:String
    stripe_code:String
    category:Category
}

input StripeObject{
    price:String
    quantity:Int
}

type PaymentResponse{
    
    url:String

}
type Message{
    message:String
}
type AddressMessage{
    message:String
    id:ID
}
type PaymentMessage{
    message:String
    successful:Boolean
    address:Address
    order:Order
}

type Discount{
    title:String
    stripe_price:String
    stripe_discount:String
    percentage:Int
    image:String
}

input DiscountInput{
    stripe_price:String
    stripe_discount:String
    percentage:Int
}
input PayInput {
    products:[[String]]
    coupon:String
}
type Mutation{
    createUser(input:UserInput!):User
    createPlate(input:PlateInput!):Plate
    login(input:LoginInput!):User
    pay(input:PayInput!):PaymentResponse
    addToCart(input:[[String]]!):Message
    deleteItemInCart(input:String!):Message
    addAddress(input:AddressInput!):AddressMessage
    deleteAddress(input:ID!):Message
    selectAddress(input:ID!):Message
    createDiscount(input:DiscountInput):Message
}